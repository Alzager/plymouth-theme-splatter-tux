#----------------------------------------- Configuration --------------------------------
stages[0] = 5; # Number of stages
stages[1] = 35; # Number of splatters in stage 1
stages[2] = 25; # Number of splatters in stage 2, you need to set this for all stages!
stages[3] = 11;
stages[4] = 37;
stages[5] = 2;

times[0] = 0; # Progress, at which splatters should start fading in
times[1] = 0.35; # Progress, at which splatters of stage 1 finish
times[2] = 0.53; # Progress, at which splatters of stage 2 finish, you need to set this for all stages!
times[3] = 0.65;
times[4] = 0.82;
times[5] = 0.83;

initialization_threshold = 2; # when to start initializing entire stages in one go, has to be > 1!

preload_offset = 0.05;

opacity_increase = 0.5; # opacity increase during fade in

max_size = 0.77; # Maximum ammount of height and width that should be used

Window.SetBackgroundTopColor (0.2, 0.2, 0.2);
Window.SetBackgroundBottomColor (0.2, 0.2, 0.2);
#----------------------------------------- End Configuration --------------------------------

fun random_array (max)
  {
  max_random = max;
  for (i = 0; i <= max; i++)
    {
    to_mix[i] = 0;
    }
  for (i = 1; i <= max; i++)
    {
    random_position = Math.Int((Math.Random() * max_random)) + 1;
    max_random = max_random - 1;
    for (j = 1; j <= random_position; j++)
      {
      if (to_mix[j] > 0)
        {
        random_position = random_position + 1;
        }
      }
    to_mix[random_position] = i;
    }
  return to_mix;
  }

initialization_threshold = Math.Min(initialization_threshold, 2);

for (s = 1; s <= stages[0]; s++)
  {
  factor[s] = (times[s] - times[s - 1]) / stages[s];
  temp_order = random_array(stages[s]);
  for (i = 1; i <= stages[s]; i++)
    {
    order[s][i] = temp_order[i];
    initialized[s][i] = 0;
    }
  }
start_initializing[1] = 1;

screen_ratio = Window.GetHeight() / Window.GetWidth();
splatter = Image("splatter_1_1.png");
splatter_height = splatter.GetHeight();
splatter_width = splatter.GetWidth();
splatter_ratio = splatter_height / splatter_width;

if (screen_ratio < splatter_ratio)
  {
  scale_factor =  Math.Min(Window.GetHeight() / splatter_height * max_size, 1);
  }
else
  {
  scale_factor =  Math.Min(Window.GetWidth() / splatter_width * max_size, 1);
  }
splatter_width_scaled = splatter_width * scale_factor;
splatter_height_scaled = splatter_height * scale_factor;
splatter_x = (Window.GetWidth() - splatter_width_scaled) / 2;
splatter_y = (Window.GetHeight() - splatter_height_scaled) / 2;

for (s = 1; s <= stages[0]; s++)
  {
  for (i = 1; i <= stages[s]; i++)
    {
    splat[s][i] = Image.Text ("");
    splat_sprite[s][i] = Sprite(splat[s][i]);
    splat_sprite[s][i].SetOpacity(0);
    }
  }

password_input_running = 0;
password_input_started = 0;
password_input_finished = 0;
initializing = 0;
initializing_started = 0;
initializing_finished = 0;

fun refresh_callback ()
  {
    # Currently we do nothing here
  }
  
Plymouth.SetRefreshFunction (refresh_callback);

#----------------------------------------- Dialogue --------------------------------

status = "normal";

fun dialog_setup()
  {
    local.box;
    local.lock;
    local.entry;
    
    box.image = Image("box.png");
    lock.image = Image("lock.png");
    entry.image = Image("entry.png");
    
    box.sprite = Sprite(box.image);
    box.x = Window.GetWidth()  / 2 - box.image.GetWidth ()/2;
    box.y = Window.GetHeight() / 2 - box.image.GetHeight()/2;
    box.z = 10000;
    box.sprite.SetPosition(box.x, box.y, box.z);
    
    lock.sprite = Sprite(lock.image);
    lock.x = box.x + box.image.GetWidth()/2 - (lock.image.GetWidth() + entry.image.GetWidth()) / 2;
    lock.y = box.y + box.image.GetHeight()/2 - lock.image.GetHeight()/2;
    lock.z = box.z + 1;
    lock.sprite.SetPosition(lock.x, lock.y, lock.z);
    
    entry.sprite = Sprite(entry.image);
    entry.x = lock.x + lock.image.GetWidth();
    entry.y = box.y + box.image.GetHeight()/2 - entry.image.GetHeight()/2;
    entry.z = box.z + 1;
    entry.sprite.SetPosition(entry.x, entry.y, entry.z);
    
    global.dialog.box = box;
    global.dialog.lock = lock;
    global.dialog.entry = entry;
    global.dialog.bullet_image = Image("bullet.png");
    dialog_opacity (1);
  }
    
fun dialog_opacity(opacity)
  {
    dialog.box.sprite.SetOpacity (opacity);
    dialog.lock.sprite.SetOpacity (opacity);
    dialog.entry.sprite.SetOpacity (opacity);
    for (index = 0; dialog.bullet[index]; index++)
      {
        dialog.bullet[index].sprite.SetOpacity(opacity);
      }
  }

fun display_normal_callback ()
  {
    global.status = "normal";
    if (global.dialog)
      dialog_opacity (0);
  }

fun display_password_callback (prompt, bullets)
  {
    global.status = "password";
    if (!global.dialog)
	dialog_setup();
    else
	dialog_opacity(1);
    for (index = 0; dialog.bullet[index] || index < bullets; index++)
      {
        if (!dialog.bullet[index])
          {
            dialog.bullet[index].sprite = Sprite(dialog.bullet_image);
            dialog.bullet[index].x = dialog.entry.x + index * dialog.bullet_image.GetWidth();
            dialog.bullet[index].y = dialog.entry.y + dialog.entry.image.GetHeight() / 2 - dialog.bullet_image.GetHeight() / 2;
            dialog.bullet[index].z = dialog.entry.z + 1;
            dialog.bullet[index].sprite.SetPosition(dialog.bullet[index].x, dialog.bullet[index].y, dialog.bullet[index].z);
          }
        if (index < bullets)
          dialog.bullet[index].sprite.SetOpacity(1);
        else
          dialog.bullet[index].sprite.SetOpacity(0);
      }
  }

Plymouth.SetDisplayNormalFunction(display_normal_callback);
Plymouth.SetDisplayPasswordFunction(display_password_callback);

#----------------------------------------- Progress -------------------------------- 

fun progress_callback (duration, progress)
  {
  if (password_input_running == 1 && status == "normal")
    {
    password_input_running = 0;
    password_input_finished = progress;
    time_offset = password_input_finished;
    time_scale = (times[stages[0]] - time_offset) / (times[stages[0]] - password_input_started);
    times[0] = (times[0] - password_input_started) * time_scale + time_offset;
    preload_offset = preload_offset * time_scale;
    for (s = 1; s <= stages[0]; s++)
      {
      times[s] = (times[s] - password_input_started) * time_scale + time_offset;
      factor[s] = (times[s] - times[s - 1]) / stages[s];
      }
    }
  if (password_input_running == 0 && status == "password")
    {
    password_input_running = 1;
    password_input_started = progress;
    }
  if (initializing == 1)
    {
    initializing = 0;
    initializing_finished = progress;
    time_offset = initializing_finished;
    time_scale = (times[stages[0]] - time_offset) / (times[stages[0]] - initializing_started);
    times[0] = (times[0] - initializing_started) * time_scale + time_offset;
    for (s = 1; s <= stages[0]; s++)
      {
      times[s] = (times[s] - initializing_started) * time_scale + time_offset;
      factor[s] = (times[s] - times[s - 1]) / stages[s];
      }
    }
  for (s = 1; s <= stages[0]; s++)
    {
    start_initializing[s + 1] = splat_sprite[s][stages[s]].GetOpacity();
    initializing_finished[s] = initialized[s][stages[s]];
    for (i = 1; i <= stages[s]; i++)
      {
      if (status == "normal" && initialized[s][i] == 0 && ((start_initializing[s] == 1 && s >= initialization_threshold) || (s < initialization_threshold && times[s - 1] + i * factor[s] <= progress + preload_offset)))
        {
        if (s >= initialization_threshold)
          {
          initializing = 1;
          initializing_started = progress;
          }
        initialized[s][i] = 1;
        splat[s][i] = Image("splatter_" + s + "_" + order[s][i] + ".png");
        scaled_splat[s][i] = splat[s][i].Scale(splatter_width_scaled, splatter_height_scaled);
        splat_sprite[s][i].SetImage(scaled_splat[s][i]);
        splat_sprite[s][i].SetOpacity(0);
        splat_sprite[s][i].SetX(splatter_x);
        splat_sprite[s][i].SetY(splatter_y);
        splat_sprite[s][i].SetZ(s);
        }
      }
    for (i = 1; i <= stages[s]; i++)
      {
      if (start_initializing[s] == 1 && times[s - 1] + i * factor[s] <= progress && splat_sprite[s][i].GetOpacity() < 1 && initializing == 0)
        {
        splat_sprite[s][i].SetOpacity(Math.Min(splat_sprite[s][i].GetOpacity() + opacity_increase, 1));
        }
      }
    }
  }

Plymouth.SetBootProgressFunction(progress_callback);

#----------------------------------------- Quit --------------------------------

fun quit_callback ()
{
}

Plymouth.SetQuitFunction(quit_callback);

#----------------------------------------- Message --------------------------------

message_sprite = Sprite();
message_sprite.SetPosition(10, 10, 10000);

fun message_callback (text)
{
  my_image = Image.Text(text, 1, 1, 1);
  message_sprite.SetImage(my_image);
}

Plymouth.SetMessageFunction(message_callback);
